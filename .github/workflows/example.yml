name: App Build and Distribute

on: 
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build_with_signing:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo "Certificate path: $CERTIFICATE_PATH"
          echo "Provisioning profile path: $PP_PATH"
          echo "Keychain path: $KEYCHAIN_PATH"

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build Production Archive
        run: |
          xcodebuild -scheme "TestDistribution" -allowProvisioningUpdates \
          -archivePath $RUNNER_TEMP/prod.xcarchive \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          clean archive

      - name: Build Development Archive
        run: |
          xcodebuild -scheme "TestDistribution" -allowProvisioningUpdates \
          -archivePath $RUNNER_TEMP/dev.xcarchive \
          -sdk iphoneos \
          -configuration Debug \
          -destination generic/platform=iOS \
          clean archive

      - name: Create ExportOptions.plist for Production
        env:
          EXPORT_OPTS_PATH: ${{ runner.temp }}/ProdExportOptions.plist
        run: |
          echo "Creating ExportOptions.plist for production at $EXPORT_OPTS_PATH"

          cat <<EOF > $EXPORT_OPTS_PATH
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>RC7W8BPRW2</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>omega.TestDistribution</key>
              <string>Test Distribution Profile</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
          </dict>
          </plist>
          EOF

          echo "Prod ExportOptions.plist content:"
          cat $EXPORT_OPTS_PATH

          plutil -lint $EXPORT_OPTS_PATH

          if [ ! -f "$EXPORT_OPTS_PATH" ]; then
            echo "Error: Prod ExportOptions.plist was not created successfully."
            exit 1
          fi

      - name: Create ExportOptions.plist for Development
        env:
          EXPORT_OPTS_PATH: ${{ runner.temp }}/DevExportOptions.plist
        run: |
          echo "Creating ExportOptions.plist for development at $EXPORT_OPTS_PATH"

          cat <<EOF > $EXPORT_OPTS_PATH
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>teamID</key>
            <string>RC7W8BPRW2</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>omega.TestDistribution.development</key>
              <string>Test Distribution Profile Dev</string>
            </dict>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
          </dict>
          </plist>
          EOF

          echo "Dev ExportOptions.plist content:"
          cat $EXPORT_OPTS_PATH

          plutil -lint $EXPORT_OPTS_PATH

          if [ ! -f "$EXPORT_OPTS_PATH" ]; then
            echo "Error: Dev ExportOptions.plist was not created successfully."
            exit 1
          fi

      - name: Ensure export path exists for Production
        env:
          EXPORT_PATH: ${{ runner.temp }}/build/prod
        run: |
          echo "Creating export path for production at $EXPORT_PATH"
          mkdir -p $EXPORT_PATH
          echo "Export path for production created: $EXPORT_PATH"
          ls -la $EXPORT_PATH

      - name: Ensure export path exists for Development
        env:
          EXPORT_PATH: ${{ runner.temp }}/build/dev
        run: |
          echo "Creating export path for development at $EXPORT_PATH"
          mkdir -p $EXPORT_PATH
          echo "Export path for development created: $EXPORT_PATH"
          ls -la $EXPORT_PATH

      - name: Export Production IPA
        env:
          EXPORT_OPTS_PATH: ${{ runner.temp }}/ProdExportOptions.plist
          EXPORT_PATH: ${{ runner.temp }}/build/prod
        run: |
          echo "Exporting Production IPA"

          if [ ! -d "$RUNNER_TEMP/prod.xcarchive" ]; then
            echo "Error: Production archive path does not exist."
            exit 1
          fi

          if [ ! -f "$EXPORT_OPTS_PATH" ]; then
            echo "Error: Prod ExportOptions.plist file does not exist."
            exit 1
          fi

          if [ ! -d "$EXPORT_PATH" ]; then
            echo "Error: Export path for production does not exist."
            exit 1
          fi

          plutil -lint $EXPORT_OPTS_PATH

          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/prod.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $EXPORT_PATH

          echo "Contents of the production export path:"
          ls -la $EXPORT_PATH

      - name: Export Development IPA
        env:
          EXPORT_OPTS_PATH: ${{ runner.temp }}/DevExportOptions.plist
          EXPORT_PATH: ${{ runner.temp }}/build/dev
        run: |
          echo "Exporting Development IPA"

          if [ ! -d "$RUNNER_TEMP/dev.xcarchive" ]; then
            echo "Error: Development archive path does not exist."
            exit 1
          fi

          if [ ! -f "$EXPORT_OPTS_PATH" ]; then
            echo "Error: Dev ExportOptions.plist file does not exist."
            exit 1
          fi

          if [ ! -d "$EXPORT_PATH" ]; then
            echo "Error: Export path for development does not exist."
            exit 1
          fi

          plutil -lint $EXPORT_OPTS_PATH

          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/dev.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $EXPORT_PATH

          echo "Contents of the development export path:"
          ls -la $EXPORT_PATH

      - name: Upload production application
        uses: actions/upload-artifact@v4
        with:
          name: prod-app.ipa
          path: ${{ runner.temp }}/build/prod/*.ipa
          retention-days: 3

      - name: Upload development application
        uses: actions/upload-artifact@v4
        with:
          name: dev-app.ipa
          path: ${{ runner.temp }}/build/dev/*.ipa
          retention-days: 3

  distribute-ios-prod:
    needs: build_with_signing 
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: prod-app.ipa
          path: ./

      - name: List files in the workspace for production
        run: ls -la

      - name: Firebase App Distribution for Production
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        with:
          appId: 1:226881656003:ios:53a8c3b60777065a6c7e76
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: prod-testers
          file: prod-app.ipa

  distribute-ios-dev:
    needs: build_with_signing 
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: dev-app.ipa
          path: ./

      - name: List files in the workspace for development
        run: ls -la

      - name: Firebase App Distribution for Development
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        with:
          appId: 1:226881656003:ios:f2d3003bab23911a6c7e76
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: dev-testers
          file: dev-app.ipa
